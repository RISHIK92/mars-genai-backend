"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StabilityAIError = exports.downloadImage = exports.makeUrl = exports.APIVersion = void 0;
const axios_1 = __importDefault(require("axios"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const uuid_1 = require("uuid");
const STABILITY_AI_BASE_URL = 'https://api.stability.ai';
var APIVersion;
(function (APIVersion) {
    APIVersion["V1"] = "v1";
    APIVersion["V2_ALPHA"] = "v2alpha";
})(APIVersion || (exports.APIVersion = APIVersion = {}));
// HELPER FUNCTIONS
function makeUrl(verison, resource, endpoint) {
    return `${STABILITY_AI_BASE_URL}/${verison}/${resource}/${endpoint}`;
}
exports.makeUrl = makeUrl;
/**
 * Download an image from a URL and return the local file path
 *
 * @param url
 * @returns filepath string
 */
async function downloadImage(url) {
    const filename = `image-${(0, uuid_1.v4)()}.png`;
    const filepath = path_1.default.join(os_1.default.tmpdir(), filename);
    const response = await (0, axios_1.default)({
        url,
        method: 'GET',
        responseType: 'stream',
    });
    await fs_extra_1.default.ensureDir(path_1.default.dirname(filepath));
    await new Promise(async (resolve, reject) => {
        try {
            response.data
                .pipe(fs_extra_1.default.createWriteStream(filepath))
                .on('error', reject)
                .once('close', () => resolve(filepath));
        }
        catch (err) {
            reject(err);
        }
    });
    return filepath;
}
exports.downloadImage = downloadImage;
class StabilityAIError extends Error {
    constructor(status, message, data) {
        let dataMessage;
        try {
            dataMessage = JSON.stringify(data);
        }
        catch {
            dataMessage = '';
        }
        const fullMessage = `${message}: ${dataMessage}`;
        super(fullMessage);
        let name = 'StabilityAIUnknownError';
        switch (status) {
            case 400:
                name = 'StabilityAIInvalidRequestError';
                break;
            case 401:
                name = 'StabilityAIUnauthorizedError';
                break;
            case 403:
                name = 'StabilityAIContentModerationError';
                break;
            case 404:
                name = 'StabilityAIRecordNotFoundError';
                break;
        }
        this.name = name;
    }
}
exports.StabilityAIError = StabilityAIError;
//# sourceMappingURL=util.js.map
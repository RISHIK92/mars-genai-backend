import * as V1User from './v1/user';
import * as V1Engines from './v1/engines';
import * as V1Generation from './v1/generation';
import * as V2AlphaGeneration from './v2alpha/generation';
declare class StabilityAI {
    private apiKey;
    private organiation?;
    private clientId?;
    private clientVersion?;
    constructor(apiKey: string);
    protected get authHeaders(): {
        Authorization: string;
    };
    protected get orgAuthHeaders(): {
        Authorization: string;
    } & {
        Organization?: string | undefined;
        'Stability-Client-ID'?: string | undefined;
        'Stability-Client-Version'?: string | undefined;
    };
    get v1(): {
        user: {
            account: () => V1User.AccountResponse;
            balance: () => V1User.BalanceResponse;
        };
        engines: {
            list: () => V1Engines.ListResponse;
        };
        generation: {
            textToImage: (engine_id: V1Generation.EngineId, text_prompts: V1Generation.TextPrompt[], options?: ({
                height?: number | undefined;
                width?: number | undefined;
            } & V1Generation.V1GenerationOptionalParams) | undefined) => V1Generation.ContentResultResponse;
            imageToImage: (engine_id: V1Generation.EngineId, text_prompts: V1Generation.TextPrompt[], init_image: string, options?: (({
                mode: "IMAGE_STRENGTH";
                image_strength?: number | undefined;
            } | {
                mode: "STEP_SCHEDULE";
                step_schedule_start?: number | undefined;
                step_schedule_end?: number | undefined;
            }) & V1Generation.V1GenerationOptionalParams) | undefined) => V1Generation.ContentResultResponse;
            imageToImageUpscale: (image: string, options: ({
                type: "esrgan";
            } | {
                type: "latent";
                text_prompts?: V1Generation.TextPrompt[] | undefined;
                seed?: number | undefined;
                steps?: number | undefined;
                cfg_scale?: number | undefined;
            }) & {
                height?: number | undefined;
                width?: number | undefined;
            }) => V1Generation.ContentResultResponse;
            imageToImageMasking: (engine_id: V1Generation.EngineId, text_prompts: V1Generation.TextPrompt[], init_image: string, options: ({
                mask_source: "MASK_IMAGE_WHITE" | "MASK_IMAGE_BLACK";
                mask_image: string;
            } | {
                mask_source: "INIT_IMAGE_ALPHA";
            }) & V1Generation.V1GenerationOptionalParams) => V1Generation.ContentResultResponse;
        };
    };
    get v2Alpha(): {
        generation: {
            upscale: (image: string, prompt: string, negativePrompt?: string | undefined, outputFormat?: import("./util").OutputFormat | undefined, seed?: number | undefined, creativity?: number | undefined) => V2AlphaGeneration.UpscaleRepsonse;
            upscaleResult: (id: string, output_format: import("./util").OutputFormat) => V2AlphaGeneration.UpscaleResultResponse;
            inpaint: (modeOptions: {
                mode: "mask";
                mask?: string | undefined;
            } | {
                mode: "search";
                search_prompt: string;
            }, image: string, prompt: string, negative_prompt?: string | undefined, seed?: number | undefined, output_format?: import("./util").OutputFormat | undefined) => V2AlphaGeneration.InpaintResponse;
            imageToVideo: (image: string, seed?: number | undefined, motion_bucket_id?: number | undefined, cfg_scale?: number | undefined) => V2AlphaGeneration.ImageToVideoResponse;
            imageToVideoResult: (id: string) => V2AlphaGeneration.ImageToVideoResultResponse;
        };
    };
}
export default StabilityAI;
